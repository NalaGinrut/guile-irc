\input texinfo @c -*- texinfo -*-
@c
@setfilename guile-irc-api.texi
@settitle    Preliminary API reference manual
@c

@copying
This is a preliminary API reference manual for guile-irc version 0.2.
Copyright @copyright{} 2012 bas smit (fbs)
@quotation
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end quotation
@end copying

@insertcopying

@chapter irc
@section The irc object

tralalala

@subsection irc object api
@deffn {Procedure} make-irc [#:nick=``bot''] [#:realname=``bot''] @
[#:hostname=``localhost''] [#:server=''localhost''] [#:port=6667] @
[#:password=''#f'']
Create a new @code{irc-object}.
@end deffn

@defvr  {Constant} *nick* ``bot''
@defvrx {Constant} *realname* ``mr bot''
@defvrx {Constant} *server* ``localhost''
@defvrx {Constant} *port* 6667
@defvrx {Constant} *hostname* ``localhost''
@defvrx {Constant} *quitmsg* ``Not enough parenthesis''
Default values.
@end defvr

@deffn {Procedure} irc-object? obj
Return @code{#t} if @var{obj} is an @code{irc-object}, else return @code{#f}.
@end deffn

@deffn  {Procedure} nick obj
@deffnx {Procedure} realname obj
@deffnx {Procedure} hostname obj
@deffnx {Procedure} password obj
@deffnx {Procedure} port obj
@deffnx {Procedure} server obj
Access the corresponding field of @code{irc-object} @var{obj}. 
@end deffn

@deffn  {Procedure} set-port! obj val
@deffnx {Procedure} set-server! obj val
@deffnx {Procedure} set-nick! obj val
@deffnx {Procedure} set-realname! obj val
@deffnx {Procedure} set-hostname! obj val
@deffnx {Procedure} set-password! obj val
Set the field of @code{irc-object} @var{obj}. @var{set-port!} expects a valid port number, all others expect a string. Using the empty string will reset the values to their defaults (see make-irc). The return value is not specified.

Note that it is not possible to set a value when connected. Trying to do so will result in an error.
@end deffn

@subsection irc commands
@deffn {Procedure} do-nick obj nick
Not yet implemented.
@end deffn

@deffn {Procedure} do-connect obj
Connect @code{irc-object} @var{obj} to server, and try to register (PASS USER NICK sequence). Failure to connect results in an error.

Note that there is no nick collision detection yet, so make sure you use a `free' nick.
@end deffn

@deffn {Procedure} do-quit obj [#:quit-msg=*quit*]
Send the @code{QUIT} command, using @var{quit-msg} as quit message. 
@end deffn

@deffn {Procedure} do-close obj
Close the connection without sending the @code{QUIT} command.
@end deffn

@deffn {Procedure} do-command obj [#:command] [#:middle] [#:trailing]
@end deffn

@deffn {Procedure} do-privmsg obj receiver msg
Send message @var{msg} to user or channel @var{receiver}.
@end deffn

@deffn {Procedure} do-listen obj
Returns a @code{irc-message-object} if there is data available, @code{#f} otherwise.
@end deffn

@deffn {Procedure} do-wait obj
Similar to @var{do-listen} but keeps waiting till data is available.
@end deffn

@deffn {Procedure} do-join obj chan 
Send the @code{JOIN} command.

Currently there is no error checking implemented, so a rejected join still shows in the channel  list.
@end deffn

@deffn {Procedure} do-runloop obj
@lisp
  (let ([sock (_socket obj)])
    (while (not (port-closed? sock))
      (handle-message obj (do-wait obj))))
@end lisp
@end deffn

@deffn {Procedure} do-part obj chan
Leave channel @var{chan}.
@end deffn

@deffn {Procedure} add-message-hook obj proc [#:tag] [#:append=#f]
@end deffn

@deffn {Procedure} add-simple-message-hook! obj proc [#:sender] [#:receiver] @
[#:command] [#:middle] [#:trailing] [#:tag] [#:append]
@end deffn

@deffn {Procedure} exists-message-hook? obj tag
Returns @code{#t} if a hook with tag @var{tag} exists, @code{#f} otherwise.
@end deffn

@deffn {Procedure} remove-message-hook! obj tag
Remove the procedure with tag @var{tag} from the message-hook of @code{irc-object} @var{obj}.
@end deffn

@deffn {Procedure} run-message-hook obj [args]
Apply all procedures from the message-hook of @code{irc-object} @var{obj} to the arguments arg .The order of the procedure application is first to last. The return value of this procedure is not specified.
@end deffn

@deffn {Procedure} reset-message-hook! obj
Remove all procedures from the message-hook of @code{irc-object} @var{obj}.
@end deffn

@deffn {Procedure} channels->list obj
Return the channels joined by @code{irc-object} @var{obj} as list.
@end deffn

@deffn {Procedure} in-channel? obj chan
Returns @code{#t} if channel @var{chan} is joined, @code{#f} otherwise.
@end deffn

@chapter message handling

Messages are parsed according to the 'pseudo' BNF in RFC 1459 (@uref{http://www.ietf.org/rfc/rfc1459.txt}).

@verbatim
<message> ::=
    [':' <prefix> <SPACE> ] <command> <params> <crlf>
<prefix> ::=
    <servername> | <nick> [ '!' <user> ] [ '@' <host> ]
<command> ::=
    <letter> { <letter> } | <number> <number> <number>
<SPACE> ::=
    ' ' { ' ' }
<params> ::=
    <SPACE> [ ':' <trailing> | <middle> <params> ]
<middle> ::=
    <Any *non-empty* sequence of octets not including SPACE or NUL or CR or LF, the first of which may not be ':'>
<trailing> ::=
    <Any, possibly *empty*, sequence of octets not including NUL or CR or LF>
<crlf> ::=
    CR LF 
@end verbatim

@section message-object
@deffn {Procedure} parse-message-string msg
Parse the message string @var{msg} into an @code{message-object}.
@end deffn

@deffn {Procedure} make-message [#:command] [#:middle] [#:trailing]
Create a new @code{message-object}.
@end deffn

@deffn {Procedure} message? obj
Return @code{#t} if @var{obj} is an message-object, else @code{#f}.
@end deffn

@deffn {Procedure} prefix msg
Return the prefix part of @code{message-object} @var{msg}. 

Either '(user nick host), server or #f.
@end deffn

@deffn {Procedure} prefix-type msg
Returns 'USER if the message was send by a user, 'SERVER if the message was send by a server and #f otherwise.
@end deffn

@deffn  {Procedure} command msg
Returns either a number or symbol depending on the type of command.
@end deffn
@deffn {Procedure} middle msg
Returns the empty string, a string or a list of string.
@end deffn
@deffn {Procedure} trailing msg
Returns a string or #f.
@end deffn
@deffn {Procedure} time msg
Returns a timestamp as created by (current-time).
@end deffn

@section Message handling helpers

@deffn {Procedure} parse-source msg
Find the source or @code{message-object} @var{msg}. If the source is found the return value is a string, otherwise it is @code{#f}.
@end deffn

@deffn {Procedure} parse-target msg
Find out who to send a reply to. 

Note that this only works for PRIVMSG and PING commands.
@end deffn

@deffn {Procedure} is-channel? str
Test if @code{string} @var{str} is a valid channel.
@end deffn

@deffn {Procedure} message->string msg
Transform @code{message-object} @var{msg} into a sendable string (i.e. command middle :trailing).
@end deffn

@bye
